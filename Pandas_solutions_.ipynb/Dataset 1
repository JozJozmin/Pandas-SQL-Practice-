{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/JozJozmin/Pandas-SQL-Practice-/blob/main/Pandas_solutions_.ipynb/Dataset%201\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "2089eece",
      "metadata": {
        "id": "2089eece"
      },
      "source": [
        "### Complete the tasks mentioned in each section below with relevant code and execute them to reflect the desired output\n",
        "\n",
        "1. Load the Data in the file - \"assignment_python.csv\" given to you as a .csv using Pandas \n",
        "2. Understand the data using the columns given (metadata descriptions below)\n",
        "3. Calculate the time period in days for which the customer was active (days from first deposit date) and enter the value in a new column titled 'Customer Lifetime' & what is the lifetime in days for customer ID - 5371454\n",
        "4. Find the city & country with the highest number of unique customers\n",
        "5. Find the unique count of players in each country (in descending order) & specify the number of unique players from the city - Kayseri\n",
        "6. Which city gives the third highest average first_deposit_amount and what is the average amount? \n",
        "7. Plot a graph showing the city and the descending unique count of the unique customers (upto the top 40 cities by the unique count) and make a large plot (clearly visible) and make sure the title and labels are clearly visible.\n",
        "8. Plot the conversion for each month of the data (Conversion % = No. of unique First Deposits in the month / No. of unique Registrations in the month) Here, the conversion percentage should be reflected in red, and the labels in the X-axis should be year & month out of the Deposit Dates.\n",
        "9. What was the conversion rate in June 2022, limit the answer to 2 decimal places. (in %)\n",
        "10. Make a copy of the original data in the file assignment_python as a pandas dataframe called 'df_ft' and generate the following columns:\n",
        "    1. week of day column from the deposit date column\n",
        "    2. descriptive statistics of the table\n",
        "    3. make a column with the first_deposit_amounts binned in bins of 500 and reflected against every customer ID (for example, someone with a first deposit amount of 880 should reflect in the binning column as '500-1000'.\n",
        "11. Find a 7 days moving average of number of registrations. (calculating an average of the T-7 days for every week's total registrations)\n",
        "\n",
        "Descriptions:\n",
        "- IDCUSTOMER = Unique Identifier for a customer\n",
        "- GENDER, CITY, COUNTRY = Self Explanatory\n",
        "- FIRST DEPOSIT AMOUNT = Customer's first deposit amount\n",
        "- REGISTRATION DATE = The date of registration of the customer\n",
        "\n",
        "- DEPOSIT DATE = The date of the first deposit made by the registered customer"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "id": "f42bdda0",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f42bdda0",
        "outputId": "98ed0034-c70c-492f-8dff-55657d445df5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ],
      "source": [
        "# Mounting google drive \n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# importing required libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from datetime import datetime\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# setting plotting background\n",
        "sns.set_style('darkgrid')\n",
        "plt.rcParams['font.size'] = 11\n",
        "plt.rcParams['figure.facecolor'] = '#00000000'"
      ],
      "metadata": {
        "id": "JyGiR3_pecds"
      },
      "id": "JyGiR3_pecds",
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Load the Data in the file\n",
        "data = pd.read_csv('/content/drive/MyDrive/Dataset_1/assignment_python.csv')"
      ],
      "metadata": {
        "id": "p5yJ-RcOe-jl"
      },
      "id": "p5yJ-RcOe-jl",
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# understanding the data\n",
        "data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "yT0ERy1jfO4l",
        "outputId": "b32038fd-80a6-4e03-ba5f-bb4bab0c28ce"
      },
      "id": "yT0ERy1jfO4l",
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   IDCUSTOMER GENDER     CITY COUNTRY  FIRST_DEPOSIT_AMOUNT REGISTRATION_DATE  \\\n",
              "0     5075649      M   ankara  Turkey                 100.0        2009-01-10   \n",
              "1     5176235      M   elazığ  Turkey                 400.0        2009-03-01   \n",
              "2     5249140      M    izmir  Turkey                 200.0        2009-04-06   \n",
              "3     5300998      M  Üsküdar  Turkey                 100.0        2009-05-02   \n",
              "4     5371454      M  sakarya  Turkey                 880.0        2009-06-07   \n",
              "\n",
              "  DEPOSIT_DATE  \n",
              "0   2022-06-05  \n",
              "1   2022-02-11  \n",
              "2   2022-05-02  \n",
              "3   2022-02-11  \n",
              "4   2022-05-29  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8f66e3a9-34e2-476f-986b-8af37656dc6f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>IDCUSTOMER</th>\n",
              "      <th>GENDER</th>\n",
              "      <th>CITY</th>\n",
              "      <th>COUNTRY</th>\n",
              "      <th>FIRST_DEPOSIT_AMOUNT</th>\n",
              "      <th>REGISTRATION_DATE</th>\n",
              "      <th>DEPOSIT_DATE</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5075649</td>\n",
              "      <td>M</td>\n",
              "      <td>ankara</td>\n",
              "      <td>Turkey</td>\n",
              "      <td>100.0</td>\n",
              "      <td>2009-01-10</td>\n",
              "      <td>2022-06-05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5176235</td>\n",
              "      <td>M</td>\n",
              "      <td>elazığ</td>\n",
              "      <td>Turkey</td>\n",
              "      <td>400.0</td>\n",
              "      <td>2009-03-01</td>\n",
              "      <td>2022-02-11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5249140</td>\n",
              "      <td>M</td>\n",
              "      <td>izmir</td>\n",
              "      <td>Turkey</td>\n",
              "      <td>200.0</td>\n",
              "      <td>2009-04-06</td>\n",
              "      <td>2022-05-02</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>5300998</td>\n",
              "      <td>M</td>\n",
              "      <td>Üsküdar</td>\n",
              "      <td>Turkey</td>\n",
              "      <td>100.0</td>\n",
              "      <td>2009-05-02</td>\n",
              "      <td>2022-02-11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5371454</td>\n",
              "      <td>M</td>\n",
              "      <td>sakarya</td>\n",
              "      <td>Turkey</td>\n",
              "      <td>880.0</td>\n",
              "      <td>2009-06-07</td>\n",
              "      <td>2022-05-29</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8f66e3a9-34e2-476f-986b-8af37656dc6f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8f66e3a9-34e2-476f-986b-8af37656dc6f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8f66e3a9-34e2-476f-986b-8af37656dc6f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# shape\n",
        "data.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6CPuOME8fRLU",
        "outputId": "314c2b14-1a05-4989-e562-b1bbe9697485"
      },
      "id": "6CPuOME8fRLU",
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(22065, 7)"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# info. of data \n",
        "data.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tVeAYwFWfbGq",
        "outputId": "8e9e2bb2-81b6-4a9e-9de6-df22ea821633"
      },
      "id": "tVeAYwFWfbGq",
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 22065 entries, 0 to 22064\n",
            "Data columns (total 7 columns):\n",
            " #   Column                Non-Null Count  Dtype  \n",
            "---  ------                --------------  -----  \n",
            " 0   IDCUSTOMER            22065 non-null  int64  \n",
            " 1   GENDER                22065 non-null  object \n",
            " 2   CITY                  22065 non-null  object \n",
            " 3   COUNTRY               22065 non-null  object \n",
            " 4   FIRST_DEPOSIT_AMOUNT  22065 non-null  float64\n",
            " 5   REGISTRATION_DATE     22065 non-null  object \n",
            " 6   DEPOSIT_DATE          22065 non-null  object \n",
            "dtypes: float64(1), int64(1), object(5)\n",
            "memory usage: 1.2+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# basic stats\n",
        "data.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "3qUeCLsZfd6t",
        "outputId": "119c9ff6-5bcc-4b2b-ecb4-d0ffe50e1d21"
      },
      "id": "3qUeCLsZfd6t",
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         IDCUSTOMER  FIRST_DEPOSIT_AMOUNT\n",
              "count  2.206500e+04          22065.000000\n",
              "mean   1.380593e+08            284.806530\n",
              "std    3.272693e+07            943.993064\n",
              "min    5.075649e+06              0.380000\n",
              "25%    1.459097e+08             70.000000\n",
              "50%    1.465139e+08            100.000000\n",
              "75%    1.471483e+08            250.000000\n",
              "max    1.478480e+08         100000.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1d1d932e-6102-4ffe-9cb4-09741dc5fa16\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>IDCUSTOMER</th>\n",
              "      <th>FIRST_DEPOSIT_AMOUNT</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>2.206500e+04</td>\n",
              "      <td>22065.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>1.380593e+08</td>\n",
              "      <td>284.806530</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>3.272693e+07</td>\n",
              "      <td>943.993064</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>5.075649e+06</td>\n",
              "      <td>0.380000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>1.459097e+08</td>\n",
              "      <td>70.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>1.465139e+08</td>\n",
              "      <td>100.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>1.471483e+08</td>\n",
              "      <td>250.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>1.478480e+08</td>\n",
              "      <td>100000.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1d1d932e-6102-4ffe-9cb4-09741dc5fa16')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1d1d932e-6102-4ffe-9cb4-09741dc5fa16 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1d1d932e-6102-4ffe-9cb4-09741dc5fa16');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# checking duplicated rows\n",
        "data[data.duplicated()]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 49
        },
        "id": "7r3saBQ9fhvi",
        "outputId": "1711ba26-429a-4ed9-c33a-ce89aafa680d"
      },
      "id": "7r3saBQ9fhvi",
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [IDCUSTOMER, GENDER, CITY, COUNTRY, FIRST_DEPOSIT_AMOUNT, REGISTRATION_DATE, DEPOSIT_DATE]\n",
              "Index: []"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3fc1aca8-defa-49a3-98e9-46b41b4196da\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>IDCUSTOMER</th>\n",
              "      <th>GENDER</th>\n",
              "      <th>CITY</th>\n",
              "      <th>COUNTRY</th>\n",
              "      <th>FIRST_DEPOSIT_AMOUNT</th>\n",
              "      <th>REGISTRATION_DATE</th>\n",
              "      <th>DEPOSIT_DATE</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3fc1aca8-defa-49a3-98e9-46b41b4196da')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3fc1aca8-defa-49a3-98e9-46b41b4196da button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3fc1aca8-defa-49a3-98e9-46b41b4196da');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# checking for duplicate customer\n",
        "data.IDCUSTOMER.nunique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LlXgkd67hyGh",
        "outputId": "fc5fd06b-f817-46b3-d25f-3dacdcd358ab"
      },
      "id": "LlXgkd67hyGh",
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "22065"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**3. Calculate the time period in days for which the customer was active (days from first deposit date) and enter the value in a new column titled 'Customer Lifetime' & what is the lifetime in days for customer ID - 5371454**"
      ],
      "metadata": {
        "id": "YupPkMeWgQ8c"
      },
      "id": "YupPkMeWgQ8c"
    },
    {
      "cell_type": "code",
      "source": [
        "# coverting the date column into datetime format\n",
        "data['REGISTRATION_DATE'] = pd.to_datetime(data['REGISTRATION_DATE'])\n",
        "data['DEPOSIT_DATE'] = pd.to_datetime(data['DEPOSIT_DATE'])"
      ],
      "metadata": {
        "id": "oBSs1t0ngRrr"
      },
      "id": "oBSs1t0ngRrr",
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate the time period in days\n",
        "data['Customer Lifetime'] = (data['DEPOSIT_DATE'] - data['REGISTRATION_DATE']).dt.days"
      ],
      "metadata": {
        "id": "A2kVJb1uid9B"
      },
      "id": "A2kVJb1uid9B",
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# lifetime in days for customer ID - 5371454\n",
        "data.loc[data.IDCUSTOMER == 5371454 ]['Customer Lifetime']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aCkoOQ22juQP",
        "outputId": "05fdd852-f82f-4463-c39c-0ec349c23fa5"
      },
      "id": "aCkoOQ22juQP",
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4    4739\n",
              "Name: Customer Lifetime, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**4. Find the city & country with the highest number of unique customers**"
      ],
      "metadata": {
        "id": "6oaOgqvdmTT9"
      },
      "id": "6oaOgqvdmTT9"
    },
    {
      "cell_type": "code",
      "source": [
        "# city with highest number of unique customers\n",
        "data.groupby('CITY')['IDCUSTOMER'].nunique().idxmax()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "id": "9CFrcCuGmjDG",
        "outputId": "2f83e8be-89f3-4489-c35b-c3ff85baaab2"
      },
      "id": "9CFrcCuGmjDG",
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'İstanbul'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# country with highest number of unique customers\n",
        "data.groupby('COUNTRY')['IDCUSTOMER'].nunique().idxmax()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "id": "1AWvN_ZLm48u",
        "outputId": "08855d24-ada3-4b3e-d263-3061bc34b489"
      },
      "id": "1AWvN_ZLm48u",
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Turkey'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**5. Find the unique count of players in each country (in descending order) & specify the number of unique players from the city - Kayseri**"
      ],
      "metadata": {
        "id": "aHG8DvHToBKl"
      },
      "id": "aHG8DvHToBKl"
    },
    {
      "cell_type": "code",
      "source": [
        "# unique count of players in each country (in descending order) \n",
        "data.groupby('COUNTRY')['IDCUSTOMER'].nunique().sort_values(ascending = False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lvzuCJ8An4zb",
        "outputId": "6c8fb755-5682-4c8b-a645-d86c207873d9"
      },
      "id": "lvzuCJ8An4zb",
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "COUNTRY\n",
              "Turkey    22065\n",
              "Name: IDCUSTOMER, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The given dataset consists of informations of customer from only one country."
      ],
      "metadata": {
        "id": "gaoEiaolqHJK"
      },
      "id": "gaoEiaolqHJK"
    },
    {
      "cell_type": "code",
      "source": [
        "# number of unique players from the city - Kayseri\n",
        "data.groupby('CITY')['IDCUSTOMER'].nunique()['Kayseri']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WYnYCXFvovGV",
        "outputId": "e17c0cfd-419d-46a1-ac51-9bfda6bcbe2a"
      },
      "id": "WYnYCXFvovGV",
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "369"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**6. Which city gives the third highest average first_deposit_amount and what is the average amount?** "
      ],
      "metadata": {
        "id": "Xh6PCs9uqgza"
      },
      "id": "Xh6PCs9uqgza"
    },
    {
      "cell_type": "code",
      "source": [
        "# calculating avg.first_deposit_amount per city\n",
        "avg_amount = data.groupby('CITY')['FIRST_DEPOSIT_AMOUNT'].mean()\n",
        "\n",
        "# printing values\n",
        "print(f'The city which gives third highest average first_deposit_amount is: {avg_amount.nlargest(3).idxmin()}\\n with an average amount of: {avg_amount.nlargest(3).min()}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OywOEu1js-kP",
        "outputId": "c930176a-9dbb-47d2-b62b-3f40ce553664"
      },
      "id": "OywOEu1js-kP",
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The city which gives third highest average first_deposit_amount is: sarıçam/Adana\n",
            " with an average amount of: 9000.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "vtcwB7p1tF5G"
      },
      "id": "vtcwB7p1tF5G",
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**7. Plot a graph showing the city and the descending unique count of the unique customers (upto the top 40 cities by the unique count) and make a large plot (clearly visible) and make sure the title and labels are clearly visible.**"
      ],
      "metadata": {
        "id": "sOtDNSdYucHK"
      },
      "id": "sOtDNSdYucHK"
    },
    {
      "cell_type": "code",
      "source": [
        "# Top 40 cities contains higher number of unique customers\n",
        "customer_count_per_city = data.groupby('CITY')['IDCUSTOMER'].nunique().sort_values(ascending = False).nlargest(40)\n",
        "\n",
        "# plotting the data\n",
        "plt.rcParams['figure.figsize'] = (15, 6)\n",
        "sns.countplot(x= 'CITY', data= data, order=customer_count_per_city.index)\n",
        "plt.title('Top 40 cities with unique count of customers',size = 14)\n",
        "plt.xticks(rotation = 90)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 486
        },
        "id": "HSP4b_xOuPd4",
        "outputId": "83b3a60d-4fa9-4d99-db7c-0f6973f4d3f9"
      },
      "id": "HSP4b_xOuPd4",
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x432 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**8. Plot the conversion for each month of the data (Conversion % = No. of unique First Deposits in the month / No. of unique Registrations in the month) Here, the conversion percentage should be reflected in red, and the labels in the X-axis should be year & month out of the Deposit Dates.**"
      ],
      "metadata": {
        "id": "CDCfaztFzXGM"
      },
      "id": "CDCfaztFzXGM"
    },
    {
      "cell_type": "code",
      "source": [
        "data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "nABR1a4ew9Tt",
        "outputId": "7d6361d2-c260-4e71-9137-2ff86e95254f"
      },
      "id": "nABR1a4ew9Tt",
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   IDCUSTOMER GENDER     CITY COUNTRY  FIRST_DEPOSIT_AMOUNT REGISTRATION_DATE  \\\n",
              "0     5075649      M   ankara  Turkey                 100.0        2009-01-10   \n",
              "1     5176235      M   elazığ  Turkey                 400.0        2009-03-01   \n",
              "2     5249140      M    izmir  Turkey                 200.0        2009-04-06   \n",
              "3     5300998      M  Üsküdar  Turkey                 100.0        2009-05-02   \n",
              "4     5371454      M  sakarya  Turkey                 880.0        2009-06-07   \n",
              "\n",
              "  DEPOSIT_DATE  Customer Lifetime  \n",
              "0   2022-06-05               4894  \n",
              "1   2022-02-11               4730  \n",
              "2   2022-05-02               4774  \n",
              "3   2022-02-11               4668  \n",
              "4   2022-05-29               4739  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2bd3abf3-2050-4863-97d8-3fbe6cf41c04\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>IDCUSTOMER</th>\n",
              "      <th>GENDER</th>\n",
              "      <th>CITY</th>\n",
              "      <th>COUNTRY</th>\n",
              "      <th>FIRST_DEPOSIT_AMOUNT</th>\n",
              "      <th>REGISTRATION_DATE</th>\n",
              "      <th>DEPOSIT_DATE</th>\n",
              "      <th>Customer Lifetime</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5075649</td>\n",
              "      <td>M</td>\n",
              "      <td>ankara</td>\n",
              "      <td>Turkey</td>\n",
              "      <td>100.0</td>\n",
              "      <td>2009-01-10</td>\n",
              "      <td>2022-06-05</td>\n",
              "      <td>4894</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5176235</td>\n",
              "      <td>M</td>\n",
              "      <td>elazığ</td>\n",
              "      <td>Turkey</td>\n",
              "      <td>400.0</td>\n",
              "      <td>2009-03-01</td>\n",
              "      <td>2022-02-11</td>\n",
              "      <td>4730</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5249140</td>\n",
              "      <td>M</td>\n",
              "      <td>izmir</td>\n",
              "      <td>Turkey</td>\n",
              "      <td>200.0</td>\n",
              "      <td>2009-04-06</td>\n",
              "      <td>2022-05-02</td>\n",
              "      <td>4774</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>5300998</td>\n",
              "      <td>M</td>\n",
              "      <td>Üsküdar</td>\n",
              "      <td>Turkey</td>\n",
              "      <td>100.0</td>\n",
              "      <td>2009-05-02</td>\n",
              "      <td>2022-02-11</td>\n",
              "      <td>4668</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5371454</td>\n",
              "      <td>M</td>\n",
              "      <td>sakarya</td>\n",
              "      <td>Turkey</td>\n",
              "      <td>880.0</td>\n",
              "      <td>2009-06-07</td>\n",
              "      <td>2022-05-29</td>\n",
              "      <td>4739</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2bd3abf3-2050-4863-97d8-3fbe6cf41c04')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2bd3abf3-2050-4863-97d8-3fbe6cf41c04 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2bd3abf3-2050-4863-97d8-3fbe6cf41c04');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# getting month and year from date column\n",
        "uniq_first_depo_per = data['DEPOSIT_DATE'].map(lambda x: x.strftime('%Y-%m'))\n",
        "uniq_registr_per = data['REGISTRATION_DATE'].map(lambda x: x.strftime('%Y-%m'))\n",
        "\n",
        "# number of unique registrations in a month \n",
        "uniq_registrations = (data.groupby(uniq_registr_per)['IDCUSTOMER'].nunique())\n",
        "\n",
        "# number of unique first deposit in the month \n",
        "uniq_first_deposit = data.groupby(uniq_first_depo_per)['FIRST_DEPOSIT_AMOUNT'].nunique()"
      ],
      "metadata": {
        "id": "RwQjLS5s4zGb"
      },
      "id": "RwQjLS5s4zGb",
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# creating a new dataframe with new values\n",
        "con_percent_df = pd.merge(uniq_registrations, uniq_first_deposit, right_index = True,\n",
        "               left_index = True)"
      ],
      "metadata": {
        "id": "yTJKfCumNPjK"
      },
      "id": "yTJKfCumNPjK",
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "con_percent_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "8w9V9L0xCRPj",
        "outputId": "b63183d5-33f3-4544-f98f-be52e1443409"
      },
      "id": "8w9V9L0xCRPj",
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         IDCUSTOMER  FIRST_DEPOSIT_AMOUNT\n",
              "2022-01        2420                   179\n",
              "2022-02        2924                   237\n",
              "2022-03        3350                   223\n",
              "2022-04        2921                   213\n",
              "2022-05        2607                   209\n",
              "2022-06        1682                   164\n",
              "2022-07        1840                   146\n",
              "2022-08        2361                   170"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d5665fbe-eab3-42de-bc92-f91cf2b77c23\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>IDCUSTOMER</th>\n",
              "      <th>FIRST_DEPOSIT_AMOUNT</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2022-01</th>\n",
              "      <td>2420</td>\n",
              "      <td>179</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-02</th>\n",
              "      <td>2924</td>\n",
              "      <td>237</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-03</th>\n",
              "      <td>3350</td>\n",
              "      <td>223</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-04</th>\n",
              "      <td>2921</td>\n",
              "      <td>213</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-05</th>\n",
              "      <td>2607</td>\n",
              "      <td>209</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-06</th>\n",
              "      <td>1682</td>\n",
              "      <td>164</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-07</th>\n",
              "      <td>1840</td>\n",
              "      <td>146</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-08</th>\n",
              "      <td>2361</td>\n",
              "      <td>170</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d5665fbe-eab3-42de-bc92-f91cf2b77c23')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d5665fbe-eab3-42de-bc92-f91cf2b77c23 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d5665fbe-eab3-42de-bc92-f91cf2b77c23');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# calculating Conversion %\n",
        "con_percent_df['Conversion_%'] = (con_percent_df['FIRST_DEPOSIT_AMOUNT']/con_percent_df['IDCUSTOMER'])*100"
      ],
      "metadata": {
        "id": "4W5HijUgq8Lb"
      },
      "id": "4W5HijUgq8Lb",
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# plotting \n",
        "fig, ax = plt.subplots()\n",
        "con_percent_df['Conversion_%'].plot(figsize=(15,6),legend=False,\n",
        "                                                   linestyle='--',\n",
        "                                                   marker='o', color = 'r', ax = ax)\n",
        "ax.set(xlabel=\"Date\",\n",
        "       ylabel=\"Conversion %\",\n",
        "       title=\"Conversion % for monthly data\")\n",
        "plt.xticks(rotation = 90)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 440
        },
        "id": "d8no-h3_xIR5",
        "outputId": "fc21863e-88c9-4713-8264-74c4ba318398"
      },
      "id": "d8no-h3_xIR5",
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x432 with 1 Axes>"
            ],
            "image/png": "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ERERERGRDKIiT0REREREJIOoyBMREREREckgKvJEREREREQyiIo8ERERERGRDKIiT0REREREJIOoyBMREREREckgKvJERERE0lDuYw9T1nV7snKzKeu6PbmPPew6koikiCzXAURERERkzeQ+9jDFg/vh1dQAEFz4A8WD+wFQd3wvl9FEJAWoJ09EREQkzRReM3pFgbecV1ND4TWjHSUSkVSiIk9EREQkzQR+XLhG20WkbVGRJyIiIpJmohtvskbbRaRtUZEnIiIikmZqzjoPPz//D9v8YJCqK692lEhEUomKPBEREZE0EvzkYwrHj6b2yL8T2WRTfM8jWlpKdf/BmnRFRADNrikiIiKSPsJhigdejF/WgapxEwiVllFSUkBFRfXv+/g+eJ67jCLinIo8ERERkTRRcPM0sj/5iKV3/wO/tOyPP/R9CkddBcEgVSPHuAkoIilBwzVFRERE0kBwvqVg0gRqjz6W+iOP/vMOnocXqiT/1hvJ+uSj1g8oIilDRZ6IiIhIGgj8/BORzbcgNH7iSvepumoUfmkZRUMGQCTSiulEJJWoyBMRERFJA+EDerDkjf/gr7/+SvfxS8sIjb2W7A/eJ+/eO1sxnYikEhV5IiIiIiks8O035N96U6xnLrD6f93qjjuR+gN6UDj5OqipaYWEIpJqNPGKiIiISKqKRike3I+sjz+i7tjjiW74l9U/xvOonDwdL1wPTdbSE5G2QUWeiIiISIrKm3kvOfPeoHLy9MQKvLjoZpuvuO0tXozfoUMy4olIitJwTREREZEUFPhxIYWjR1C/3wHUnnbGWh2jcPQISg85AKqqWjidiKQyFXkiIiIiKaho2CC8aITKydPXenHzukOPIPjD9xROmtDC6UQklanIExEREUlB1f0vpXLSNKJbbLnWx2jYqxs1fc4k/7abCH76SQumE5FUpiJPREREJJVEowA07LkXdSectM6HW752XvFQrZ0n0laoyBMRERFJIcXnn0XhmJEtdjy/tIzQmPEEv/2G4Ddft9hxRSR1qcgTERERSRE5Tz9B3lNziJaUtOhx647vRfnbHxLp3KVFjysiqUlFnoiIiEgK8MoXU3zZpYR32oWai/q38ME9/PYlEImQ89LzLXtsEUk5KvJEREREUkDRVcPxKpZQOfUmyErOUsZ5D8ykfe9eKvREMlxSF0M3xvQExgLZQDlw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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**9. What was the conversion rate in June 2022, limit the answer to 2 decimal places. (in %)**"
      ],
      "metadata": {
        "id": "Q1_ak9rl52kH"
      },
      "id": "Q1_ak9rl52kH"
    },
    {
      "cell_type": "code",
      "source": [
        "con_percent_df.loc[con_percent_df.index =='2022-06']['Conversion_%']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lKlbTvGP74bo",
        "outputId": "95537cce-07c5-47fb-ea61-2e2bda35c291"
      },
      "id": "lKlbTvGP74bo",
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2022-06    9.750297\n",
              "Name: Conversion_%, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "10. Make a copy of the original data in the file assignment_python as a pandas dataframe called 'df_ft' and generate the following columns:\n",
        " 1.  week of day column from the deposit date column\n",
        " 2. descriptive statistics of the table\n",
        " 3.  make a column with the first_deposit_amounts binned in bins of 500 and reflected against every customer ID (for example, someone with a first deposit amount of 880 should reflect in the binning column as '500-1000'"
      ],
      "metadata": {
        "id": "-0ep0UGD6MWN"
      },
      "id": "-0ep0UGD6MWN"
    },
    {
      "cell_type": "code",
      "source": [
        "# creating a copy of the dataframe\n",
        "df_ft = data.copy()"
      ],
      "metadata": {
        "id": "sCweeKIz6Lo8"
      },
      "id": "sCweeKIz6Lo8",
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 1. creating week day column (Monday is denoted as 1 - Sunday is 7)\n",
        "df_ft['week_day'] = df_ft['DEPOSIT_DATE'].apply(lambda x:x.isoweekday())"
      ],
      "metadata": {
        "id": "b9hbcQMQ6p64"
      },
      "id": "b9hbcQMQ6p64",
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_ft.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "hPK-T-UOn6We",
        "outputId": "e4d2939d-5634-4744-e7b9-cbb58d889cde"
      },
      "id": "hPK-T-UOn6We",
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   IDCUSTOMER GENDER     CITY COUNTRY  FIRST_DEPOSIT_AMOUNT REGISTRATION_DATE  \\\n",
              "0     5075649      M   ankara  Turkey                 100.0        2009-01-10   \n",
              "1     5176235      M   elazığ  Turkey                 400.0        2009-03-01   \n",
              "2     5249140      M    izmir  Turkey                 200.0        2009-04-06   \n",
              "3     5300998      M  Üsküdar  Turkey                 100.0        2009-05-02   \n",
              "4     5371454      M  sakarya  Turkey                 880.0        2009-06-07   \n",
              "\n",
              "  DEPOSIT_DATE  Customer Lifetime  week_day  \n",
              "0   2022-06-05               4894         7  \n",
              "1   2022-02-11               4730         5  \n",
              "2   2022-05-02               4774         1  \n",
              "3   2022-02-11               4668         5  \n",
              "4   2022-05-29               4739         7  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a0b978b3-f29e-4e46-9458-24acaa17b7e5\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>IDCUSTOMER</th>\n",
              "      <th>GENDER</th>\n",
              "      <th>CITY</th>\n",
              "      <th>COUNTRY</th>\n",
              "      <th>FIRST_DEPOSIT_AMOUNT</th>\n",
              "      <th>REGISTRATION_DATE</th>\n",
              "      <th>DEPOSIT_DATE</th>\n",
              "      <th>Customer Lifetime</th>\n",
              "      <th>week_day</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5075649</td>\n",
              "      <td>M</td>\n",
              "      <td>ankara</td>\n",
              "      <td>Turkey</td>\n",
              "      <td>100.0</td>\n",
              "      <td>2009-01-10</td>\n",
              "      <td>2022-06-05</td>\n",
              "      <td>4894</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5176235</td>\n",
              "      <td>M</td>\n",
              "      <td>elazığ</td>\n",
              "      <td>Turkey</td>\n",
              "      <td>400.0</td>\n",
              "      <td>2009-03-01</td>\n",
              "      <td>2022-02-11</td>\n",
              "      <td>4730</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5249140</td>\n",
              "      <td>M</td>\n",
              "      <td>izmir</td>\n",
              "      <td>Turkey</td>\n",
              "      <td>200.0</td>\n",
              "      <td>2009-04-06</td>\n",
              "      <td>2022-05-02</td>\n",
              "      <td>4774</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>5300998</td>\n",
              "      <td>M</td>\n",
              "      <td>Üsküdar</td>\n",
              "      <td>Turkey</td>\n",
              "      <td>100.0</td>\n",
              "      <td>2009-05-02</td>\n",
              "      <td>2022-02-11</td>\n",
              "      <td>4668</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5371454</td>\n",
              "      <td>M</td>\n",
              "      <td>sakarya</td>\n",
              "      <td>Turkey</td>\n",
              "      <td>880.0</td>\n",
              "      <td>2009-06-07</td>\n",
              "      <td>2022-05-29</td>\n",
              "      <td>4739</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a0b978b3-f29e-4e46-9458-24acaa17b7e5')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a0b978b3-f29e-4e46-9458-24acaa17b7e5 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a0b978b3-f29e-4e46-9458-24acaa17b7e5');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 2. descriptive statistics of the table for numeric columns\n",
        "df_ft.describe()"
      ],
      "metadata": {
        "id": "lMK14HeW61xo",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "outputId": "51a0ad38-edf4-4e68-a5b0-a064b29fcc38"
      },
      "id": "lMK14HeW61xo",
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         IDCUSTOMER  FIRST_DEPOSIT_AMOUNT  Customer Lifetime      week_day\n",
              "count  2.206500e+04          22065.000000       22065.000000  22065.000000\n",
              "mean   1.380593e+08            284.806530          91.358713      4.036392\n",
              "std    3.272693e+07            943.993064         420.345796      1.977160\n",
              "min    5.075649e+06              0.380000           0.000000      1.000000\n",
              "25%    1.459097e+08             70.000000           0.000000      2.000000\n",
              "50%    1.465139e+08            100.000000           0.000000      4.000000\n",
              "75%    1.471483e+08            250.000000           1.000000      6.000000\n",
              "max    1.478480e+08         100000.000000        4894.000000      7.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-78e9597d-f247-4540-a67e-809d4bcb1d9e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>IDCUSTOMER</th>\n",
              "      <th>FIRST_DEPOSIT_AMOUNT</th>\n",
              "      <th>Customer Lifetime</th>\n",
              "      <th>week_day</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>2.206500e+04</td>\n",
              "      <td>22065.000000</td>\n",
              "      <td>22065.000000</td>\n",
              "      <td>22065.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>1.380593e+08</td>\n",
              "      <td>284.806530</td>\n",
              "      <td>91.358713</td>\n",
              "      <td>4.036392</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>3.272693e+07</td>\n",
              "      <td>943.993064</td>\n",
              "      <td>420.345796</td>\n",
              "      <td>1.977160</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>5.075649e+06</td>\n",
              "      <td>0.380000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>1.459097e+08</td>\n",
              "      <td>70.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>1.465139e+08</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>4.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>1.471483e+08</td>\n",
              "      <td>250.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>6.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>1.478480e+08</td>\n",
              "      <td>100000.000000</td>\n",
              "      <td>4894.000000</td>\n",
              "      <td>7.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-78e9597d-f247-4540-a67e-809d4bcb1d9e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-78e9597d-f247-4540-a67e-809d4bcb1d9e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-78e9597d-f247-4540-a67e-809d4bcb1d9e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_ft.describe(include = 'object')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "st-QX3n380qt",
        "outputId": "962b5e69-0515-4e90-c9e8-ca6702856693"
      },
      "id": "st-QX3n380qt",
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       GENDER      CITY COUNTRY\n",
              "count   22065     22065   22065\n",
              "unique      3       331       1\n",
              "top         M  İstanbul  Turkey\n",
              "freq    21985      4770   22065"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0e066ad8-569f-42fe-b1a0-6d00c040c3cd\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>GENDER</th>\n",
              "      <th>CITY</th>\n",
              "      <th>COUNTRY</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>22065</td>\n",
              "      <td>22065</td>\n",
              "      <td>22065</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>3</td>\n",
              "      <td>331</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>M</td>\n",
              "      <td>İstanbul</td>\n",
              "      <td>Turkey</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>21985</td>\n",
              "      <td>4770</td>\n",
              "      <td>22065</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0e066ad8-569f-42fe-b1a0-6d00c040c3cd')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-0e066ad8-569f-42fe-b1a0-6d00c040c3cd button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-0e066ad8-569f-42fe-b1a0-6d00c040c3cd');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_ft['GENDER'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6fb_Bll0_ZkQ",
        "outputId": "f2bf7d92-4184-40a0-c066-2ed9ad5a0a46"
      },
      "id": "6fb_Bll0_ZkQ",
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "M      21985\n",
              "F         79\n",
              "M          1\n",
              "Name: GENDER, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 3. binning of deposit column\n",
        "bins = list(np.arange(0,10500,500))\n",
        "df_ft['first_deposit_amounts_binned'] = pd.cut(df_ft['FIRST_DEPOSIT_AMOUNT'], bins)"
      ],
      "metadata": {
        "id": "UTqLsnOh__dz"
      },
      "id": "UTqLsnOh__dz",
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_ft['first_deposit_amounts_binned'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QmK5Ohu1BebD",
        "outputId": "146da3aa-f362-466d-a82f-b05ededdc8d4"
      },
      "id": "QmK5Ohu1BebD",
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0, 500]         19823\n",
              "(500, 1000]       1658\n",
              "(1000, 1500]       252\n",
              "(1500, 2000]       139\n",
              "(4500, 5000]        41\n",
              "(2500, 3000]        35\n",
              "(2000, 2500]        23\n",
              "(9500, 10000]       22\n",
              "(3500, 4000]        19\n",
              "(3000, 3500]        13\n",
              "(5500, 6000]         6\n",
              "(4000, 4500]         4\n",
              "(7000, 7500]         4\n",
              "(7500, 8000]         4\n",
              "(6500, 7000]         3\n",
              "(8500, 9000]         2\n",
              "(6000, 6500]         1\n",
              "(8000, 8500]         1\n",
              "(5000, 5500]         1\n",
              "(9000, 9500]         0\n",
              "Name: first_deposit_amounts_binned, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**11. Find a 7 days moving average of number of registrations. (calculating an average of the T-7 days for every week's total registrations)**"
      ],
      "metadata": {
        "id": "26V18BKFDRaO"
      },
      "id": "26V18BKFDRaO"
    },
    {
      "cell_type": "code",
      "source": [
        "df_ft = df_ft.sort_values('REGISTRATION_DATE')"
      ],
      "metadata": {
        "id": "Um0rlo7rJDQg"
      },
      "id": "Um0rlo7rJDQg",
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# total number of registrations in every week \n",
        "df_ft['week_num_registrations']= df_ft['REGISTRATION_DATE'].dt.isocalendar().week"
      ],
      "metadata": {
        "id": "rtVtyEAjN1ul"
      },
      "id": "rtVtyEAjN1ul",
      "execution_count": 39,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_ft"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 505
        },
        "id": "G09NHlDqM07E",
        "outputId": "0e945e9b-3b67-4827-feb1-42b1db8cc6d5"
      },
      "id": "G09NHlDqM07E",
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       IDCUSTOMER GENDER      CITY COUNTRY  FIRST_DEPOSIT_AMOUNT  \\\n",
              "0         5075649      M    ankara  Turkey                 100.0   \n",
              "1         5176235      M    elazığ  Turkey                 400.0   \n",
              "2         5249140      M     izmir  Turkey                 200.0   \n",
              "3         5300998      M   Üsküdar  Turkey                 100.0   \n",
              "4         5371454      M   sakarya  Turkey                 880.0   \n",
              "...           ...    ...       ...     ...                   ...   \n",
              "22030   147845091      M     Düzce  Turkey                 300.0   \n",
              "22031   147842701      M    Manisa  Turkey                 100.0   \n",
              "22032   147845811      M  İstanbul  Turkey                 100.0   \n",
              "22019   147841881      M   Erzurum  Turkey                 100.0   \n",
              "22064   147844971      M  İstanbul  Turkey                 150.0   \n",
              "\n",
              "      REGISTRATION_DATE DEPOSIT_DATE  Customer Lifetime  week_day  \\\n",
              "0            2009-01-10   2022-06-05               4894         7   \n",
              "1            2009-03-01   2022-02-11               4730         5   \n",
              "2            2009-04-06   2022-05-02               4774         1   \n",
              "3            2009-05-02   2022-02-11               4668         5   \n",
              "4            2009-06-07   2022-05-29               4739         7   \n",
              "...                 ...          ...                ...       ...   \n",
              "22030        2022-08-31   2022-08-31                  0         3   \n",
              "22031        2022-08-31   2022-08-31                  0         3   \n",
              "22032        2022-08-31   2022-08-31                  0         3   \n",
              "22019        2022-08-31   2022-08-31                  0         3   \n",
              "22064        2022-08-31   2022-08-31                  0         3   \n",
              "\n",
              "      first_deposit_amounts_binned  week_num_registrations  \n",
              "0                         (0, 500]                       2  \n",
              "1                         (0, 500]                       9  \n",
              "2                         (0, 500]                      15  \n",
              "3                         (0, 500]                      18  \n",
              "4                      (500, 1000]                      23  \n",
              "...                            ...                     ...  \n",
              "22030                     (0, 500]                      35  \n",
              "22031                     (0, 500]                      35  \n",
              "22032                     (0, 500]                      35  \n",
              "22019                     (0, 500]                      35  \n",
              "22064                     (0, 500]                      35  \n",
              "\n",
              "[22065 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3c3208d2-e32e-4bd1-9a97-5f9c053a8db8\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>IDCUSTOMER</th>\n",
              "      <th>GENDER</th>\n",
              "      <th>CITY</th>\n",
              "      <th>COUNTRY</th>\n",
              "      <th>FIRST_DEPOSIT_AMOUNT</th>\n",
              "      <th>REGISTRATION_DATE</th>\n",
              "      <th>DEPOSIT_DATE</th>\n",
              "      <th>Customer Lifetime</th>\n",
              "      <th>week_day</th>\n",
              "      <th>first_deposit_amounts_binned</th>\n",
              "      <th>week_num_registrations</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5075649</td>\n",
              "      <td>M</td>\n",
              "      <td>ankara</td>\n",
              "      <td>Turkey</td>\n",
              "      <td>100.0</td>\n",
              "      <td>2009-01-10</td>\n",
              "      <td>2022-06-05</td>\n",
              "      <td>4894</td>\n",
              "      <td>7</td>\n",
              "      <td>(0, 500]</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5176235</td>\n",
              "      <td>M</td>\n",
              "      <td>elazığ</td>\n",
              "      <td>Turkey</td>\n",
              "      <td>400.0</td>\n",
              "      <td>2009-03-01</td>\n",
              "      <td>2022-02-11</td>\n",
              "      <td>4730</td>\n",
              "      <td>5</td>\n",
              "      <td>(0, 500]</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5249140</td>\n",
              "      <td>M</td>\n",
              "      <td>izmir</td>\n",
              "      <td>Turkey</td>\n",
              "      <td>200.0</td>\n",
              "      <td>2009-04-06</td>\n",
              "      <td>2022-05-02</td>\n",
              "      <td>4774</td>\n",
              "      <td>1</td>\n",
              "      <td>(0, 500]</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>5300998</td>\n",
              "      <td>M</td>\n",
              "      <td>Üsküdar</td>\n",
              "      <td>Turkey</td>\n",
              "      <td>100.0</td>\n",
              "      <td>2009-05-02</td>\n",
              "      <td>2022-02-11</td>\n",
              "      <td>4668</td>\n",
              "      <td>5</td>\n",
              "      <td>(0, 500]</td>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5371454</td>\n",
              "      <td>M</td>\n",
              "      <td>sakarya</td>\n",
              "      <td>Turkey</td>\n",
              "      <td>880.0</td>\n",
              "      <td>2009-06-07</td>\n",
              "      <td>2022-05-29</td>\n",
              "      <td>4739</td>\n",
              "      <td>7</td>\n",
              "      <td>(500, 1000]</td>\n",
              "      <td>23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22030</th>\n",
              "      <td>147845091</td>\n",
              "      <td>M</td>\n",
              "      <td>Düzce</td>\n",
              "      <td>Turkey</td>\n",
              "      <td>300.0</td>\n",
              "      <td>2022-08-31</td>\n",
              "      <td>2022-08-31</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>(0, 500]</td>\n",
              "      <td>35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22031</th>\n",
              "      <td>147842701</td>\n",
              "      <td>M</td>\n",
              "      <td>Manisa</td>\n",
              "      <td>Turkey</td>\n",
              "      <td>100.0</td>\n",
              "      <td>2022-08-31</td>\n",
              "      <td>2022-08-31</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>(0, 500]</td>\n",
              "      <td>35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22032</th>\n",
              "      <td>147845811</td>\n",
              "      <td>M</td>\n",
              "      <td>İstanbul</td>\n",
              "      <td>Turkey</td>\n",
              "      <td>100.0</td>\n",
              "      <td>2022-08-31</td>\n",
              "      <td>2022-08-31</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>(0, 500]</td>\n",
              "      <td>35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22019</th>\n",
              "      <td>147841881</td>\n",
              "      <td>M</td>\n",
              "      <td>Erzurum</td>\n",
              "      <td>Turkey</td>\n",
              "      <td>100.0</td>\n",
              "      <td>2022-08-31</td>\n",
              "      <td>2022-08-31</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>(0, 500]</td>\n",
              "      <td>35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22064</th>\n",
              "      <td>147844971</td>\n",
              "      <td>M</td>\n",
              "      <td>İstanbul</td>\n",
              "      <td>Turkey</td>\n",
              "      <td>150.0</td>\n",
              "      <td>2022-08-31</td>\n",
              "      <td>2022-08-31</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>(0, 500]</td>\n",
              "      <td>35</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>22065 rows × 11 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3c3208d2-e32e-4bd1-9a97-5f9c053a8db8')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3c3208d2-e32e-4bd1-9a97-5f9c053a8db8 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3c3208d2-e32e-4bd1-9a97-5f9c053a8db8');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 7 days rolling mean in weekly count\n",
        "df_ft.groupby('week_num_registrations')['IDCUSTOMER'].count().rolling(7).mean()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lWS70nC4OxNh",
        "outputId": "15d15368-378b-4697-f340-7e38cb0b2463"
      },
      "id": "lWS70nC4OxNh",
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "week_num_registrations\n",
              "1            NaN\n",
              "2            NaN\n",
              "3            NaN\n",
              "4            NaN\n",
              "5            NaN\n",
              "6            NaN\n",
              "7     661.714286\n",
              "8     686.714286\n",
              "9     715.428571\n",
              "10    739.000000\n",
              "11    784.142857\n",
              "12    804.571429\n",
              "13    774.428571\n",
              "14    749.857143\n",
              "15    750.714286\n",
              "16    742.142857\n",
              "17    742.000000\n",
              "18    731.714286\n",
              "19    701.714286\n",
              "20    703.428571\n",
              "21    681.714286\n",
              "22    639.857143\n",
              "23    603.142857\n",
              "24    544.142857\n",
              "25    483.000000\n",
              "26    457.428571\n",
              "27    427.000000\n",
              "28    418.428571\n",
              "29    415.428571\n",
              "30    419.714286\n",
              "31    447.000000\n",
              "32    481.714286\n",
              "33    502.714286\n",
              "34    516.428571\n",
              "35    484.714286\n",
              "36    430.285714\n",
              "37    365.285714\n",
              "38    287.142857\n",
              "39    205.142857\n",
              "40    134.428571\n",
              "41     65.285714\n",
              "42     40.000000\n",
              "43     42.285714\n",
              "44     46.428571\n",
              "45     46.714286\n",
              "46     47.000000\n",
              "47     48.714286\n",
              "48     49.142857\n",
              "49     56.285714\n",
              "50     60.428571\n",
              "51     64.714286\n",
              "52     91.714286\n",
              "53     87.000000\n",
              "Name: IDCUSTOMER, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "W3b3D2XYI_RF"
      },
      "id": "W3b3D2XYI_RF",
      "execution_count": 42,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.12"
    },
    "toc": {
      "base_numbering": 1,
      "nav_menu": {},
      "number_sections": true,
      "sideBar": true,
      "skip_h1_title": false,
      "title_cell": "Table of Contents",
      "title_sidebar": "Contents",
      "toc_cell": false,
      "toc_position": {},
      "toc_section_display": true,
      "toc_window_display": false
    },
    "colab": {
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}